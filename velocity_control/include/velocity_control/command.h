// Generated by gencpp from file velocity_control/command.msg
// DO NOT EDIT!


#ifndef VELOCITY_CONTROL_MESSAGE_COMMAND_H
#define VELOCITY_CONTROL_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace velocity_control
{
template <class ContainerAllocator>
struct command_
{
  typedef command_<ContainerAllocator> Type;

  command_()
    : linear(0.0)
    , angular(0.0)
    , duration(0.0)
    , override(false)  {
    }
  command_(const ContainerAllocator& _alloc)
    : linear(0.0)
    , angular(0.0)
    , duration(0.0)
    , override(false)  {
    }



   typedef double _linear_type;
  _linear_type linear;

   typedef double _angular_type;
  _angular_type angular;

   typedef double _duration_type;
  _duration_type duration;

   typedef uint8_t _override_type;
  _override_type override;




  typedef boost::shared_ptr< ::velocity_control::command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::velocity_control::command_<ContainerAllocator> const> ConstPtr;

}; // struct command_

typedef ::velocity_control::command_<std::allocator<void> > command;

typedef boost::shared_ptr< ::velocity_control::command > commandPtr;
typedef boost::shared_ptr< ::velocity_control::command const> commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::velocity_control::command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::velocity_control::command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace velocity_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'velocity_control': ['/home/rlalleme/ros/indigo/src/template_modules/velocity_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::velocity_control::command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::velocity_control::command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::velocity_control::command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::velocity_control::command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::velocity_control::command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::velocity_control::command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::velocity_control::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a27533bead123708bc3948686778dcb5";
  }

  static const char* value(const ::velocity_control::command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa27533bead123708ULL;
  static const uint64_t static_value2 = 0xbc3948686778dcb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::velocity_control::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "velocity_control/command";
  }

  static const char* value(const ::velocity_control::command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::velocity_control::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 linear\n\
float64 angular\n\
float64 duration\n\
bool override\n\
";
  }

  static const char* value(const ::velocity_control::command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::velocity_control::command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear);
      stream.next(m.angular);
      stream.next(m.duration);
      stream.next(m.override);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::velocity_control::command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::velocity_control::command_<ContainerAllocator>& v)
  {
    s << indent << "linear: ";
    Printer<double>::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
    Printer<double>::stream(s, indent + "  ", v.angular);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "override: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.override);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VELOCITY_CONTROL_MESSAGE_COMMAND_H
